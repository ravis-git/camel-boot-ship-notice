buildscript {
	ext {
		springBootVersion = '1.5.8.RELEASE'
        camelVersion = '2.20.0'
        restassuredVersion = '3.0.5'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

group = 'com.ge.trans.rc360.camel'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {
	compile(
			'org.springframework.boot:spring-boot-starter',
            'org.springframework.boot:spring-boot-starter-jersey',
            'org.springframework.boot:spring-boot-devtools',
            'org.codehaus.groovy:groovy-json:2.4.12',
            "org.apache.camel:camel-spring-boot-starter:${camelVersion}",

            // dependency to use jsonpath for camel content based router
            "org.apache.camel:camel-jsonpath:${camelVersion}"
    )
	compile('org.codehaus.groovy:groovy')
	testCompile(
			'org.springframework.boot:spring-boot-starter-test',
			'org.hamcrest:hamcrest-core:1.3',
            "io.rest-assured:rest-assured:${restassuredVersion}"
	)
}

test {

	//logging
	testLogging {
		// set options for log level LIFECYCLE
		events "failed"
		exceptionFormat "short"
		showStandardStreams = true

		// set options for log level DEBUG
		lifecycle {
			events "passed", "skipped", "failed"
			exceptionFormat "full"
		}

		// remove standard output/error logging from --info builds
		// by assigning only 'failed' and 'skipped' events
		info.events = ["passed","failed", "skipped"]
	}
}
